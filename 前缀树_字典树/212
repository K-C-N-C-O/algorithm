class Solution {
    int[][] dirs={{1,0},{-1,0},{0,1},{0,-1}};

    public List<String> findWords(char[][] board, String[] words) {
        Trie t=new Trie();
        for(String word:words){
            t.insert(word);
        }
        Set<String> ans=new HashSet<>();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                dfs(board,t,i,j,ans);
            }
        }
        return new ArrayList<String>(ans);
    }


    public void dfs(char[][] board,Trie t,int i,int j,Set<String> ans){
        if(board[i][j]=='#'){
            return ;
        }
        if(t.next[board[i][j]-'a']==null){
            return;
        }
        char ch=board[i][j];
        t=t.next[ch-'a'];
        if(!"".equals(t.word)){
            ans.add(t.word);
        }
        board[i][j]='#';
        for(int[] dir:dirs){
            int i2=i+dir[0],j2=j+dir[1];
            if(i2>=0&&i2<board.length&&j2>=0&&j2<board[0].length){
                dfs(board,t,i2,j2,ans);
            }
        }
        board[i][j]=ch;
    }




    class Trie{
        String word;
        Trie[] next;
        boolean isEnd;

        public Trie(){
            this.word="";
            this.next=new Trie[26];
        }

        public void insert(String word){
            Trie cur=this;
            for(char c:word.toCharArray()){
                int idx=c-'a';
                if(cur.next[idx]==null){
                    cur.next[idx]=new Trie();
                }
                cur=cur.next[idx];
            }
            cur.isEnd=true;
            cur.word=word;
        }

    }
}
