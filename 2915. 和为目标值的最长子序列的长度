//记忆化搜索

class Solution {
    private List<Integer> nums;
    private int[][] memo;

    public int lengthOfLongestSubsequence(List<Integer> nums, int target) {
        this.nums = nums;
        int n = nums.size();
        memo = new int[n][target + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(memo[i], -1);
        }
        return dfs(n - 1, target)<0?-1:dfs(n - 1, target);
    }

    public int dfs(int i, int c) {
        if (i < 0) {
            return c == 0 ? 0 : Integer.MIN_VALUE;
        }
        if (memo[i][c] != -1) {
            return memo[i][c];
        }
        if (nums.get(i) > c) {
            return memo[i][c] = dfs(i - 1, c);
        }
        return memo[i][c] = Math.max(dfs(i - 1, c), dfs(i - 1, c - nums.get(i)) + 1);
    }
}

//递推 二维数组

class Solution {
    public int lengthOfLongestSubsequence(List<Integer> nums, int target) {     
        int n = nums.size();
        int[][] f=new int[n+1][target+1];
        for(int i=0;i<n+1;i++){
            Arrays.fill(f[i],Integer.MIN_VALUE);
        }
        f[0][0]=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<target+1;j++){
                if(j<nums.get(i)){
                    f[i+1][j]=f[i][j];
                }else{
                    f[i+1][j]=Math.max(f[i][j],f[i][j-nums.get(i)]+1);
                }
            }
        }
        int ans=f[n][target];
        return ans<0?-1:ans;        
    }

}

//递推 二维数组优化 滚动数组
class Solution {
    public int lengthOfLongestSubsequence(List<Integer> nums, int target) {     
        int n = nums.size();
        int[][] f=new int[2][target+1];
        for(int i=0;i<2;i++){
            Arrays.fill(f[i],Integer.MIN_VALUE);
        }
        f[0][0]=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<target+1;j++){
                if(j<nums.get(i)){
                    f[(i+1)%2][j]=f[i%2][j];
                }else{
                    f[(i+1)%2][j]=Math.max(f[i%2][j],f[i%2][j-nums.get(i)]+1);
                }
            }
        }
        int ans=f[n%2][target];
        return ans<0?-1:ans;        
    }

}

//递推 一维数组

class Solution {
    public int lengthOfLongestSubsequence(List<Integer> nums, int target) {     
        int n = nums.size();
        int[] f=new int[target+1]; 
        Arrays.fill(f,Integer.MIN_VALUE);
        f[0]=0;
        for(int i=0;i<n;i++){
            for(int j=target;j>=nums.get(i);j--){
                f[j]=Math.max(f[j],f[j-nums.get(i)]+1);   
            }
        }
        return f[target]<0?-1:f[target];        
    }

}
