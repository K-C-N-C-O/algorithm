/*
记忆化搜素
*/

class Solution {
    int[] memo;
    int[] nums;

    public int rob(int[] nums) {
        this.nums=nums;
        int n=nums.length;
        memo=new int[n];
        Arrays.fill(memo,-1);
        dfs(n-1);
        return memo[n-1];

    }
    public int dfs(int i){
        if(i<0){
            return 0;
        }
        if(memo[i]!=-1){
            return memo[i];
        }
        memo[i]=Math.max(dfs(i-1),dfs(i-2)+nums[i]);
        return memo[i];
    }
}

//递推
class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int[] f=new int[n+2];
        for(int i=0;i<n;i++){
            f[i+2]=Math.max(f[i+1],f[i]+nums[i]);
        }
        return f[n+1];

    }
}

//递推 滚动空间优化
class Solution {
    public int rob(int[] nums) {
        int n=nums.length;
        int f0=0,f1=0;
        for(int i=0;i<n;i++){
            int new_f=Math.max(f1,f0+nums[i]);
            f0=f1;
            f1=new_f;
        }
        return f1;

    }
}
