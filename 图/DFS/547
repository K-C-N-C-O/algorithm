//dfs
class Solution {
    boolean[] vis; 
    int num;
    int n;
    public int findCircleNum(int[][] isConnected) {
        n=isConnected.length;
        vis=new boolean[n];
        int num=0;
        for(int i=0;i<n;i++){ 
            if(!vis[i]){
                dfs(isConnected,i);
                num++;
            }
        }
        return num;
    }
    public void dfs(int[][] isConnected,int i){
        for(int j=0;j<n;j++){
            if(isConnected[i][j]==1&&!vis[j]){
                vis[j]=true;
                dfs(isConnected,j);
            }
        }
    }
}

//bfs

class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        boolean[] vis = new boolean[n];
        int ans = 0;
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                q.offer(i);
                while (!q.isEmpty()) {
                    int j = q.poll();
                    vis[j] = true;
                    for (int k = 0; k < n; k++) {
                        if (isConnected[j][k] == 1 && !vis[k]) {
                            q.offer(k);
                        }
                    }
                }
                ans++;
            }
        }
        return ans;
    }
}


//并查集
